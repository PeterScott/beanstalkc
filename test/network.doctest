Handling of network errors in beanstalkc
========================================

    >>> import os, signal, threading, time
    >>> import beanstalkc

To get things going, we'll need to have a beanstalkd running:

    >>> def launch_beanstalkd():
    ...     pid = os.spawnlp(os.P_NOWAIT,
    ...                      'beanstalkd',
    ...                      'beanstalkd', '-l', '127.0.0.1', '-p', '14712')
    ...     time.sleep(0.2) # Give beanstalkd some time to start up.
    ...     return pid

    >>> def kill_beanstalkd(pid):
    ...     os.kill(pid, signal.SIGTERM)
    ...     time.sleep(0.2) # Also give beanstalkd some time to terminate.

    >>> pid = launch_beanstalkd()

Let's connect to this beanstalkd:

    >>> q = beanstalkc.Connection(port=14712)


`Connection#closed`
-------------------

Observe that we are now connected:

    >>> q.closed
    False

If we are connected, calling `Connection#connect` is a no-op:

    >>> q.stats()['total-connections']
    1

    >>> q.connect()
    >>> q.connect()
    >>> q.connect()

    >>> q.stats()['total-connections']
    1

_IMPORTANT NOTICE:_ The only guarantee regarding the `closed` attribute is that
when `closed == True`, the `beanstalkc.Connection` was either explicitly closed
or automatically closed due to socket errors. This means, that the `Connection`
is definitely not connected in any sense (i.e. neither are the underlying
Python `socket` or TCP connection). The observation that `closed == False` does
_not_ imply the converse, i.e. the `Connection` is not necessarily connected.
it typically only means that beanstalkc managed to successfully connect before
and has not been explicitly closed or encountered any socket error since.


Socket errors
-------------

    >>> class SimpleWorker(threading.Thread):
    ...     def __init__(self, conn):
    ...         threading.Thread.__init__(self)
    ...         self.conn = conn
    ...         self.sum = 0
    ...     def run(self):
    ...         try:
    ...             while True:
    ...                 self.process(self.conn.reserve())
    ...         except beanstalkc.SocketError, e:
    ...             self.error = e
    ...     def process(self, job):
    ...         self.sum += int(job.body)
    ...         job.delete()

    >>> w = SimpleWorker(q)
    >>> w.start()

It may happen, that for whatever reason, the running beanstalkd dies:

    >>> kill_beanstalkd(pid)

This leads the pending `Connection#reserve` in our worker to throw a
`beanstalkc.SocketError`:

    >>> w.join()
    >>> raise w.error
    Traceback (most recent call last):
    ...
    SocketError...

The same is true for all kinds of networking-related error: beanstalkc wraps
all underlying socket errors in `beanstalkc.SocketError`. And as basically all
beanstalkc methods interact with the network this means that all methods may
throw `SocketError`s.

Since this all happened in SimpleWorker's thread-local connection, it has not
had any effect on the `w` that we have in the console:

    >>> q.closed
    False

However, whitness that beanstalkc closes the connection if any socket errors
occur:

    >>> try: q.stats()
    ... except beanstalkc.SocketError: print 'Socket error'
    Socket error
    >>> q.closed
    True


Basic Reconnect Idiom
---------------------

If we put the pieces described above together, we arrive at a pretty simple
idiom for reconnecting on network errors:

  1. `connect` before calling any method interacting over the network,

  2. handle `SocketError`s to implement app-specific error recovery, command
     retry logic, or reconnection throttling.

A reconnecting worker may therefore look as follows:

    >>> class ReconnectWorker(threading.Thread):                        # 01
    ...     def __init__(self, conn):                                   # 02
    ...         threading.Thread.__init__(self)                         # 03
    ...         self.conn = conn                                        # 04
    ...         self.stop = False                                       # 05
    ...         self.sum = 0                                            # 06
    ...     def run(self):                                              # 07
    ...         while not self.stop:                                    # 08
    ...             try:                                                # 09
    ...                 self.conn.connect()                             # 10
    ...                 self.process(self.conn.reserve())               # 11
    ...             except beanstalkc.SocketError, e:                   # 12
    ...                 time.sleep(0.1) # Throttle connection attempts  # 13
    ...     def process(self, job):                                     # 14
    ...         self.sum += int(job.body)                               # 15
    ...         job.delete()                                            # 16

In order to be able to adapt the above to different circumstances, it is
important to understand what is going on in detail. As mentioned above,
`Connection#connect` is only a no-op for connections which are not closed; it
does not try to detect wether a connection is still alive. So what happens when
e.g. beanstalkd goes down is:

  1. beanstalkd goes down.

  2. The connection `conn` is not yet `closed` (i.e. still connected),
     therefore `connect` in line 10 does nothing.

  3. `reserve` in line 11 tries to interact over the network. As beanstalkd
     is down, the interaction will fail. This leads to the connection being
     closed and a `SocketError` being raised.

  4. The exception handler in lines 12-13 catches this `SocketError` and
     ignores it. To not enter a tight loop of failed connection attempts,
     line 13 suspends execution for a bit.

  5. As soon as execution resumes, we loop back to line 10. As the connection
     is now closed, `connect` will attempt to (re-)connect:

    * If the connection attempt succeeds, operation is back to normal.
      `reserve` in line 11 will block to fetch a job.

    * If the conneciton attempt fails, another `SocketError` will be thrown,
      looping back to step 4 or line 12-13, respectivel.

While this basic reconnection strategy will be sufficient for many users, more
advanced strategies are possible (such as limiting the total number of
consecutive reconnection attempts, or an exponential back-off between
attempts).

Let's examine the behaviour of above `ReconnectWorker` with an example:

    >>> pid = launch_beanstalkd()

    >>> w = ReconnectWorker(q)
    >>> w.start()

    >>> p = beanstalkc.Connection(port=14712)
    >>> _ = p.put('1')
    >>> _ = p.put('2')
    >>> p.close()
    >>> time.sleep(0.5) # Give our worker some time to process.

Now, if beanstalkd goes away, the running worker will be unaffected:

    >>> kill_beanstalkd(pid)

Instead, it will happily continue to work, once beanstalkd comes back up:

    >>> pid = launch_beanstalkd()

    >>> p = beanstalkc.Connection(port=14712)
    >>> _ = p.put('3')
    >>> _ = p.put('4')
    >>> p.close()
    >>> time.sleep(0.5) # Give our worker some time to process.

And, after all is said and done, we shut down our machinery for good:

    >>> kill_beanstalkd(pid)
    >>> w.stop = True
    >>> w.join()

Our brave worker, having survived the disconnect between processing '2' and
'3', will correctly tell us the sum of 1, 2, 3, and 4:

    >>> print w.sum
    10


Epilogue
--------

Let's ensure we don't have stray beanstalkd's hanging around:

    >>> kill_beanstalkd(pid)
